# I tend to use `again` as the name for recursive calls when using `fix`:
factorial := (fix .[ again : [ -> [ Int -> Int ]] .  .[ n : Int . match (zero? n) { +[True]+ => one  +[False]+ => (times n ((again) (minus n one))) } ]. ].)

# Recursive types need `mu_type`:
IntList t= mu_type IntList . enum { Nil () Cons (Int IntList) }

# The unfolded form is useful because that's what the constructors create:
IntListUF t= enum { Nil () Cons (Int IntList) }

# Constructing an enum requires a type annotation, as does `fold`.
empty_ilist := fold +[Nil]+ : IntListUF : IntList
3_ilist := fold +[Cons three empty_ilist]+ : IntListUF : IntList
23_ilist := fold +[Cons two 3_ilist]+ : IntListUF : IntList
123_ilist := fold +[Cons one 23_ilist]+ : IntListUF : IntList


sum_int_list := (fix .[again : [-> [IntList -> Int]] . .[ lst : IntList . match unfold lst { +[Nil]+ => zero +[Cons hd tl]+ => (plus hd ((again) tl))} ]. ]. )

# Parametric recursive types:
# Note: There's no type relationship between `IntList` and `List <[Int]<`. Use the latter!
List t= forall T . mu_type List . enum { Nil () Cons (T List <[T]<) }
ListUF t= forall T . enum { Nil () Cons (T List <[T]<) }

# Accepting parametrically-typed arguments:
list_len := forall T . (fix .[again : [-> [List <[T]< -> Int]] . .[ lst : List <[T]< . match unfold lst { +[Nil]+ => zero +[Cons hd tl]+ => (plus one ((again) tl))} ]. ].)

empty_int_list := fold +[Nil]+ : ListUF <[Int]< : List <[Int]<

# In order to prevent having to write *two* type annotations every cons, let's define a helper function:
cons := forall T . .[ car : T  cdr : List <[T]<  .  fold +[Cons car cdr]+ : ListUF <[T]< : List <[T]< ].

3_list := (cons three empty_int_list)
23_list := (cons two 3_list)
123_list := (cons one 23_list)

# Now try `(list_len 123_list)`!
# Remember to save useful things to the prelude!
